// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n CommandSetOption -f -o gen_options_commandset.go"
// Version: 0.0.3

package promptx

var _ = promptxCommandSetOptions()

// CommandSetOptions command set options
// generate by https://github.com/aggronmagi/gogen/
type CommandSetOptions struct {
	// comman set name
	Name string
	// command set commands
	Commands []*Cmd
	// HistoryFile
	HistoryFile string
	// PreCheck check before exec command
	PreCheck func(ctx Context) error
	// PromptWords set mode prompt words
	PromptWords []*Word
	// ChangeNotify notify changed to this mode
	ChangeNotify func(ctx Context, args []interface{})
}

// comman set name
func withCommandSetOptionName(v string) CommandSetOption {
	return func(cc *CommandSetOptions) CommandSetOption {
		previous := cc.Name
		cc.Name = v
		return withCommandSetOptionName(previous)
	}
}

// command set commands
func withCommandSetOptionCommands(v ...*Cmd) CommandSetOption {
	return func(cc *CommandSetOptions) CommandSetOption {
		previous := cc.Commands
		cc.Commands = v
		return withCommandSetOptionCommands(previous...)
	}
}

// HistoryFile
func WithCommandSetOptionHistoryFile(v string) CommandSetOption {
	return func(cc *CommandSetOptions) CommandSetOption {
		previous := cc.HistoryFile
		cc.HistoryFile = v
		return WithCommandSetOptionHistoryFile(previous)
	}
}

// PreCheck check before exec command
func WithCommandSetOptionPreCheck(v func(ctx Context) error) CommandSetOption {
	return func(cc *CommandSetOptions) CommandSetOption {
		previous := cc.PreCheck
		cc.PreCheck = v
		return WithCommandSetOptionPreCheck(previous)
	}
}

// PromptWords set mode prompt words
func WithCommandSetOptionPromptWords(v ...*Word) CommandSetOption {
	return func(cc *CommandSetOptions) CommandSetOption {
		previous := cc.PromptWords
		cc.PromptWords = v
		return WithCommandSetOptionPromptWords(previous...)
	}
}

// ChangeNotify notify changed to this mode
func WithCommandSetOptionChangeNotify(v func(ctx Context, args []interface{})) CommandSetOption {
	return func(cc *CommandSetOptions) CommandSetOption {
		previous := cc.ChangeNotify
		cc.ChangeNotify = v
		return WithCommandSetOptionChangeNotify(previous)
	}
}

// SetOption modify options
func (cc *CommandSetOptions) SetOption(opt CommandSetOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *CommandSetOptions) ApplyOption(opts ...CommandSetOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *CommandSetOptions) GetSetOption(opt CommandSetOption) CommandSetOption {
	return opt(cc)
}

// CommandSetOption option define
type CommandSetOption func(cc *CommandSetOptions) CommandSetOption

// NewCommandSetOptions create options instance.
func NewCommandSetOptions(opts ...CommandSetOption) *CommandSetOptions {
	cc := newDefaultCommandSetOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogCommandSetOptions != nil {
		watchDogCommandSetOptions(cc)
	}
	return cc
}

// InstallCommandSetOptionsWatchDog install watch dog
func InstallCommandSetOptionsWatchDog(dog func(cc *CommandSetOptions)) {
	watchDogCommandSetOptions = dog
}

var watchDogCommandSetOptions func(cc *CommandSetOptions)

// newDefaultCommandSetOptions new option with default value
func newDefaultCommandSetOptions() *CommandSetOptions {
	cc := &CommandSetOptions{
		Name:        "",
		Commands:    nil,
		HistoryFile: "",
		PreCheck:    nil,
		PromptWords: nil,
		ChangeNotify: func(ctx Context, args []interface{}) {
		},
	}
	return cc
}
