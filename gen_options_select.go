// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n SelectOption -f -o gen_options_select.go"
// Version: 0.0.3

package promptx

var _ = promptxSelectOptions()

// InputOptions promptx options
// generate by https://github.com/aggronmagi/gogen/
type SelectOptions struct {
	Options    []*Suggest
	RowsLimit  int
	FinishFunc func(sels []int)
	Multi      bool
	FinishKey  Key
	CancelKey  Key
	// select tip info
	TipText      string
	TipTextColor Color
	TipBGColor   Color
	// help text info
	ShowHelpText  bool
	HelpText      SelHelpTextFunc
	HelpTextColor Color
	HelpBGColor   Color
	// valid info
	ValidFunc      func(sels []int) error
	ValidTextColor Color
	ValidBGColor   Color
	// select options info
	SuggestionTextColor          Color
	SuggestionBGColor            Color
	SelectedSuggestionTextColor  Color
	SelectedSuggestionBGColor    Color
	DescriptionTextColor         Color
	DescriptionBGColor           Color
	SelectedDescriptionTextColor Color
	SelectedDescriptionBGColor   Color
	ScrollbarThumbColor          Color
	ScrollbarBGColor             Color
	// finish text show
	FinishText SelFinishTextFunc
	// contrl selct result display select context
	ResultShowItem  bool
	ResultTextColor Color
	ResultBGColor   Color
}

func WithSelectOptionOptions(v ...*Suggest) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.Options
		cc.Options = v
		return WithSelectOptionOptions(previous...)
	}
}
func WithSelectOptionRowsLimit(v int) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.RowsLimit
		cc.RowsLimit = v
		return WithSelectOptionRowsLimit(previous)
	}
}
func WithSelectOptionFinishFunc(v func(sels []int)) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.FinishFunc
		cc.FinishFunc = v
		return WithSelectOptionFinishFunc(previous)
	}
}
func WithSelectOptionMulti(v bool) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.Multi
		cc.Multi = v
		return WithSelectOptionMulti(previous)
	}
}
func WithSelectOptionFinishKey(v Key) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.FinishKey
		cc.FinishKey = v
		return WithSelectOptionFinishKey(previous)
	}
}
func WithSelectOptionCancelKey(v Key) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.CancelKey
		cc.CancelKey = v
		return WithSelectOptionCancelKey(previous)
	}
}

// select tip info
func WithSelectOptionTipText(v string) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.TipText
		cc.TipText = v
		return WithSelectOptionTipText(previous)
	}
}
func WithSelectOptionTipTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.TipTextColor
		cc.TipTextColor = v
		return WithSelectOptionTipTextColor(previous)
	}
}
func WithSelectOptionTipBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.TipBGColor
		cc.TipBGColor = v
		return WithSelectOptionTipBGColor(previous)
	}
}

// help text info
func WithSelectOptionShowHelpText(v bool) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ShowHelpText
		cc.ShowHelpText = v
		return WithSelectOptionShowHelpText(previous)
	}
}
func WithSelectOptionHelpText(v SelHelpTextFunc) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.HelpText
		cc.HelpText = v
		return WithSelectOptionHelpText(previous)
	}
}
func WithSelectOptionHelpTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.HelpTextColor
		cc.HelpTextColor = v
		return WithSelectOptionHelpTextColor(previous)
	}
}
func WithSelectOptionHelpBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.HelpBGColor
		cc.HelpBGColor = v
		return WithSelectOptionHelpBGColor(previous)
	}
}

// valid info
func WithSelectOptionValidFunc(v func(sels []int) error) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ValidFunc
		cc.ValidFunc = v
		return WithSelectOptionValidFunc(previous)
	}
}
func WithSelectOptionValidTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ValidTextColor
		cc.ValidTextColor = v
		return WithSelectOptionValidTextColor(previous)
	}
}
func WithSelectOptionValidBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ValidBGColor
		cc.ValidBGColor = v
		return WithSelectOptionValidBGColor(previous)
	}
}

// select options info
func WithSelectOptionSuggestionTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.SuggestionTextColor
		cc.SuggestionTextColor = v
		return WithSelectOptionSuggestionTextColor(previous)
	}
}
func WithSelectOptionSuggestionBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.SuggestionBGColor
		cc.SuggestionBGColor = v
		return WithSelectOptionSuggestionBGColor(previous)
	}
}
func WithSelectOptionSelectedSuggestionTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.SelectedSuggestionTextColor
		cc.SelectedSuggestionTextColor = v
		return WithSelectOptionSelectedSuggestionTextColor(previous)
	}
}
func WithSelectOptionSelectedSuggestionBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.SelectedSuggestionBGColor
		cc.SelectedSuggestionBGColor = v
		return WithSelectOptionSelectedSuggestionBGColor(previous)
	}
}
func WithSelectOptionDescriptionTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.DescriptionTextColor
		cc.DescriptionTextColor = v
		return WithSelectOptionDescriptionTextColor(previous)
	}
}
func WithSelectOptionDescriptionBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.DescriptionBGColor
		cc.DescriptionBGColor = v
		return WithSelectOptionDescriptionBGColor(previous)
	}
}
func WithSelectOptionSelectedDescriptionTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.SelectedDescriptionTextColor
		cc.SelectedDescriptionTextColor = v
		return WithSelectOptionSelectedDescriptionTextColor(previous)
	}
}
func WithSelectOptionSelectedDescriptionBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.SelectedDescriptionBGColor
		cc.SelectedDescriptionBGColor = v
		return WithSelectOptionSelectedDescriptionBGColor(previous)
	}
}
func WithSelectOptionScrollbarThumbColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ScrollbarThumbColor
		cc.ScrollbarThumbColor = v
		return WithSelectOptionScrollbarThumbColor(previous)
	}
}
func WithSelectOptionScrollbarBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ScrollbarBGColor
		cc.ScrollbarBGColor = v
		return WithSelectOptionScrollbarBGColor(previous)
	}
}

// finish text show
func WithSelectOptionFinishText(v SelFinishTextFunc) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.FinishText
		cc.FinishText = v
		return WithSelectOptionFinishText(previous)
	}
}

// contrl selct result display select context
func WithSelectOptionResultShowItem(v bool) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ResultShowItem
		cc.ResultShowItem = v
		return WithSelectOptionResultShowItem(previous)
	}
}
func WithSelectOptionResultTextColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ResultTextColor
		cc.ResultTextColor = v
		return WithSelectOptionResultTextColor(previous)
	}
}
func WithSelectOptionResultBGColor(v Color) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.ResultBGColor
		cc.ResultBGColor = v
		return WithSelectOptionResultBGColor(previous)
	}
}

// SetOption modify options
func (cc *SelectOptions) SetOption(opt SelectOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *SelectOptions) ApplyOption(opts ...SelectOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *SelectOptions) GetSetOption(opt SelectOption) SelectOption {
	return opt(cc)
}

// SelectOption option define
type SelectOption func(cc *SelectOptions) SelectOption

// NewSelectOptions create options instance.
func NewSelectOptions(opts ...SelectOption) *SelectOptions {
	cc := newDefaultSelectOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogSelectOptions != nil {
		watchDogSelectOptions(cc)
	}
	return cc
}

// InstallSelectOptionsWatchDog install watch dog
func InstallSelectOptionsWatchDog(dog func(cc *SelectOptions)) {
	watchDogSelectOptions = dog
}

var watchDogSelectOptions func(cc *SelectOptions)

// newDefaultSelectOptions new option with default value
func newDefaultSelectOptions() *SelectOptions {
	cc := &SelectOptions{
		Options:                      nil,
		RowsLimit:                    5,
		FinishFunc:                   nil,
		Multi:                        false,
		FinishKey:                    Enter,
		CancelKey:                    ControlC,
		TipText:                      "",
		TipTextColor:                 Yellow,
		TipBGColor:                   DefaultColor,
		ShowHelpText:                 false,
		HelpText:                     defaultSelHelpText,
		HelpTextColor:                DefaultColor,
		HelpBGColor:                  DefaultColor,
		ValidFunc:                    nil,
		ValidTextColor:               Red,
		ValidBGColor:                 DefaultColor,
		SuggestionTextColor:          White,
		SuggestionBGColor:            Cyan,
		SelectedSuggestionTextColor:  Black,
		SelectedSuggestionBGColor:    Turquoise,
		DescriptionTextColor:         Black,
		DescriptionBGColor:           Turquoise,
		SelectedDescriptionTextColor: White,
		SelectedDescriptionBGColor:   Cyan,
		ScrollbarThumbColor:          DarkGray,
		ScrollbarBGColor:             Cyan,
		FinishText:                   defaultSelFinishText,
		ResultShowItem:               true,
		ResultTextColor:              Blue,
		ResultBGColor:                DefaultColor,
	}
	return cc
}
