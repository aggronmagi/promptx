// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n PromptOption -o gen_options_prompt.go"
// Version: 0.0.3

package promptx

import (
	input "github.com/aggronmagi/promptx/input"
	output "github.com/aggronmagi/promptx/output"
)

var _ = promptxPromptOptions()

// PromptOptions promptx options
// generate by https://github.com/aggronmagi/gogen/
type PromptOptions struct {
	// default global input options
	InputOptions []InputOption
	// default global select options
	SelectOptions []SelectOption
	// default common options. use to create default optins
	CommonOpions []CommonOption
	// default manager. if it is not nil, ignore CommonOpions.
	BlocksManager BlocksManager
	// input
	Input input.ConsoleParser
	// output
	Output output.ConsoleWriter
	Stderr output.ConsoleWriter
}

// default global input options
func WithInputOptions(v ...InputOption) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.InputOptions
		cc.InputOptions = v
		return WithInputOptions(previous...)
	}
}

// default global select options
func WithSelectOptions(v ...SelectOption) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.SelectOptions
		cc.SelectOptions = v
		return WithSelectOptions(previous...)
	}
}

// default common options. use to create default optins
func WithCommonOpions(v ...CommonOption) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.CommonOpions
		cc.CommonOpions = v
		return WithCommonOpions(previous...)
	}
}

// default manager. if it is not nil, ignore CommonOpions.
func WithBlocksManager(v BlocksManager) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.BlocksManager
		cc.BlocksManager = v
		return WithBlocksManager(previous)
	}
}

// input
func WithInput(v input.ConsoleParser) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.Input
		cc.Input = v
		return WithInput(previous)
	}
}

// output
func WithOutput(v output.ConsoleWriter) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.Output
		cc.Output = v
		return WithOutput(previous)
	}
}
func WithStderr(v output.ConsoleWriter) PromptOption {
	return func(cc *PromptOptions) PromptOption {
		previous := cc.Stderr
		cc.Stderr = v
		return WithStderr(previous)
	}
}

// SetOption modify options
func (cc *PromptOptions) SetOption(opt PromptOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *PromptOptions) ApplyOption(opts ...PromptOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *PromptOptions) GetSetOption(opt PromptOption) PromptOption {
	return opt(cc)
}

// PromptOption option define
type PromptOption func(cc *PromptOptions) PromptOption

// NewPromptOptions create options instance.
func NewPromptOptions(opts ...PromptOption) *PromptOptions {
	cc := newDefaultPromptOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogPromptOptions != nil {
		watchDogPromptOptions(cc)
	}
	return cc
}

// InstallPromptOptionsWatchDog install watch dog
func InstallPromptOptionsWatchDog(dog func(cc *PromptOptions)) {
	watchDogPromptOptions = dog
}

var watchDogPromptOptions func(cc *PromptOptions)

// newDefaultPromptOptions new option with default value
func newDefaultPromptOptions() *PromptOptions {
	cc := &PromptOptions{
		InputOptions:  nil,
		SelectOptions: nil,
		CommonOpions:  nil,
		BlocksManager: nil,
		Input:         input.NewStandardInputParser(),
		Output:        output.NewStandardOutputWriter(),
		Stderr:        output.NewStderrWriter(),
	}
	return cc
}
