// Code generated by hand; DO NOT EDIT.
// This is a little bit stupid, but there are many public constants which is no value for writing godoc comment.

package promptx

import "math"

// Key is the type express the key inserted from user.
//go:generate stringer -type=Key
type Key uint64

// UnkownKey use to set block manager cancel/finish key
var UnkownKey Key = math.MaxUint64

// KeyBindFunc receives context and process
type KeyBindFunc func(ctx PressContext) (exit bool)

// KeyBind represents which key should do what operation.
type KeyBind struct {
	Key Key
	Fn  KeyBindFunc
}

// ASCIICode is the type contains Key and it's ascii byte array.
type ASCIICode struct {
	Key       Key
	ASCIICode []byte
}

const (
	Escape Key = iota

	ControlA
	ControlB
	ControlC
	ControlD
	ControlE
	ControlF
	ControlG
	ControlH
	controlI // not export. equal Tab.
	controlJ // not export. equal Enter.
	ControlK
	ControlL
	controlM // not export. equal Enter.
	ControlN
	ControlO
	ControlP
	ControlQ
	ControlR
	ControlS
	ControlT
	ControlU
	ControlV
	ControlW
	ControlX
	ControlY
	ControlZ

	// Meta[Alt] + [a-f]
	MetaA
	MetaB
	MetaC
	MetaD
	MetaE
	MetaF
	MetaG
	MetaH
	MetaI
	MetaJ
	MetaK
	MetaL
	MetaM
	MetaN
	MetaO
	MetaP
	MetaQ
	MetaR
	MetaS
	MetaT
	MetaU
	MetaV
	MetaW
	MetaX
	MetaY
	MetaZ

	// Meta[Alt] + Shift [a-z]
	// Meta[Alt] + [A-Z]
	MetaShiftA
	MetaShiftB
	MetaShiftC
	MetaShiftD
	MetaShiftE
	MetaShiftF
	MetaShiftG
	MetaShiftH
	MetaShiftI
	MetaShiftJ
	MetaShiftK
	MetaShiftL
	MetaShiftM
	MetaShiftN
	MetaShiftO
	MetaShiftP
	MetaShiftQ
	MetaShiftR
	MetaShiftS
	MetaShiftT
	MetaShiftU
	MetaShiftV
	MetaShiftW
	MetaShiftX
	MetaShiftY
	MetaShiftZ

	ControlSpace
	ControlBackslash
	ControlSquareClose
	ControlCircumflex
	ControlUnderscore
	ControlLeft
	ControlRight
	ControlUp
	ControlDown

	Up
	Down
	Right
	Left

	ShiftLeft
	ShiftUp
	ShiftDown
	ShiftRight

	Home
	End
	Delete
	ShiftDelete
	ControlDelete
	PageUp
	PageDown
	BackTab
	Insert
	Backspace

	// Aliases.
	Tab
	Enter
	// Actually Enter equals ControlM, not ControlJ,
	// However, in prompt_toolkit, we made the mistake of translating
	// \r into \n during the input, so everyone is now handling the
	// enter key by binding ControlJ.

	// From now on, it's better to bind `ASCII_SEQUENCES.Enter` everywhere,
	// because that's future compatible, and will still work when we
	// stop replacing \r by \n.

	F1
	F2
	F3
	F4
	F5
	F6
	F7
	F8
	F9
	F10
	F11
	F12
	F13
	F14
	F15
	F16
	F17
	F18
	F19
	F20
	F21
	F22
	F23
	F24

	// Matches any key.
	Any

	// Special
	CPRResponse
	Vt100MouseEvent
	WindowsMouseEvent
	BracketedPaste

	// Key which is ignored. (The key binding for this key should not do anything.)
	Ignore

	// Key is not defined
	NotDefined
)
