// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n CommonOption -f -o gen_options_common.go"
// Version: 0.0.3

package promptx

var _ = promptxCommonOptions()

// CommonOptions promptx options
// generate by https://github.com/aggronmagi/gogen/
type CommonOptions struct {
	TipText         string
	TipTextColor    Color
	TipBGColor      Color
	PrefixText      string
	PrefixTextColor Color
	PrefixBGColor   Color
	// check input valid
	ValidFunc      func(status int, in *Document) error
	ValidTextColor Color
	ValidBGColor   Color
	// exec input command
	ExecFunc   func(ctx Context, command string)
	FinishKey  Key
	CancelKey  Key
	Completion []CompleteOption
	// if command slice size > 0. it will ignore ExecFunc and ValidFunc options
	Commands []*Cmd
	// alway check input command
	AlwaysCheckCommand bool
	// history file
	History string
	// CommandPreCheck check before exec Cmd. only use for promptx.Cmd.
	CommandPreCheck func(ctx Context) error
}

func WithCommonOptionTipText(v string) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.TipText
		cc.TipText = v
		return WithCommonOptionTipText(previous)
	}
}
func WithCommonOptionTipTextColor(v Color) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.TipTextColor
		cc.TipTextColor = v
		return WithCommonOptionTipTextColor(previous)
	}
}
func WithCommonOptionTipBGColor(v Color) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.TipBGColor
		cc.TipBGColor = v
		return WithCommonOptionTipBGColor(previous)
	}
}
func WithCommonOptionPrefixText(v string) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.PrefixText
		cc.PrefixText = v
		return WithCommonOptionPrefixText(previous)
	}
}
func WithCommonOptionPrefixTextColor(v Color) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.PrefixTextColor
		cc.PrefixTextColor = v
		return WithCommonOptionPrefixTextColor(previous)
	}
}
func WithCommonOptionPrefixBGColor(v Color) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.PrefixBGColor
		cc.PrefixBGColor = v
		return WithCommonOptionPrefixBGColor(previous)
	}
}

// check input valid
func WithCommonOptionValidFunc(v func(status int, in *Document) error) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.ValidFunc
		cc.ValidFunc = v
		return WithCommonOptionValidFunc(previous)
	}
}
func WithCommonOptionValidTextColor(v Color) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.ValidTextColor
		cc.ValidTextColor = v
		return WithCommonOptionValidTextColor(previous)
	}
}
func WithCommonOptionValidBGColor(v Color) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.ValidBGColor
		cc.ValidBGColor = v
		return WithCommonOptionValidBGColor(previous)
	}
}

// exec input command
func WithCommonOptionExecFunc(v func(ctx Context, command string)) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.ExecFunc
		cc.ExecFunc = v
		return WithCommonOptionExecFunc(previous)
	}
}
func WithCommonOptionFinishKey(v Key) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.FinishKey
		cc.FinishKey = v
		return WithCommonOptionFinishKey(previous)
	}
}
func WithCommonOptionCancelKey(v Key) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.CancelKey
		cc.CancelKey = v
		return WithCommonOptionCancelKey(previous)
	}
}
func WithCommonOptionCompletion(v ...CompleteOption) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.Completion
		cc.Completion = v
		return WithCommonOptionCompletion(previous...)
	}
}

// if command slice size > 0. it will ignore ExecFunc and ValidFunc options
func WithCommonOptionCommands(v ...*Cmd) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.Commands
		cc.Commands = v
		return WithCommonOptionCommands(previous...)
	}
}

// alway check input command
func WithCommonOptionAlwaysCheckCommand(v bool) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.AlwaysCheckCommand
		cc.AlwaysCheckCommand = v
		return WithCommonOptionAlwaysCheckCommand(previous)
	}
}

// history file
func WithCommonOptionHistory(v string) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.History
		cc.History = v
		return WithCommonOptionHistory(previous)
	}
}

// CommandPreCheck check before exec Cmd. only use for promptx.Cmd.
func WithCommonOptionCommandPreCheck(v func(ctx Context) error) CommonOption {
	return func(cc *CommonOptions) CommonOption {
		previous := cc.CommandPreCheck
		cc.CommandPreCheck = v
		return WithCommonOptionCommandPreCheck(previous)
	}
}

// SetOption modify options
func (cc *CommonOptions) SetOption(opt CommonOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *CommonOptions) ApplyOption(opts ...CommonOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *CommonOptions) GetSetOption(opt CommonOption) CommonOption {
	return opt(cc)
}

// CommonOption option define
type CommonOption func(cc *CommonOptions) CommonOption

// NewCommonOptions create options instance.
func NewCommonOptions(opts ...CommonOption) *CommonOptions {
	cc := newDefaultCommonOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogCommonOptions != nil {
		watchDogCommonOptions(cc)
	}
	return cc
}

// InstallCommonOptionsWatchDog install watch dog
func InstallCommonOptionsWatchDog(dog func(cc *CommonOptions)) {
	watchDogCommonOptions = dog
}

var watchDogCommonOptions func(cc *CommonOptions)

// newDefaultCommonOptions new option with default value
func newDefaultCommonOptions() *CommonOptions {
	cc := &CommonOptions{
		TipText:            "",
		TipTextColor:       Yellow,
		TipBGColor:         DefaultColor,
		PrefixText:         ">>> ",
		PrefixTextColor:    Green,
		PrefixBGColor:      DefaultColor,
		ValidFunc:          nil,
		ValidTextColor:     Red,
		ValidBGColor:       DefaultColor,
		ExecFunc:           nil,
		FinishKey:          Enter,
		CancelKey:          ControlC,
		Completion:         nil,
		Commands:           nil,
		AlwaysCheckCommand: false,
		History:            "",
		CommandPreCheck:    nil,
	}
	return cc
}
